buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE")
    }
}

apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'spring-boot'

version = '1.0'

repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/libs-milestone'}
    maven { url 'http://repo.spring.io/libs-release'}
    maven { url "https://jitpack.io" }
}


ext {
    springVersion = '4.3.2.RELEASE'
    groovyVersion = '2.4.7'
    junitVersion = '4.12'
    slf4jVersion = '1.7.5'
    log4jVersion = '1.2.17'
}

dependencies {
//    classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE")


    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile 'com.github.pengrad:java-telegram-bot-api:2.1.1'

    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-context-support:$springVersion"
    compile 'org.springframework.data:spring-data-mongodb:1.9.2.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter:1.4.1.RELEASE'
    compile group: 'javax.mail', name: 'mail', version: '1.4.1'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.7.1'
    compile group: 'log4j', name: 'log4j', version: '1.2.16'
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    testCompile "junit:junit:$junitVersion"
}

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy']
        }
    }

    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDir 'src/main/resources'
            include '*.properties'
            output.resourcesDir = 'build/classes/main'
        }
    }

    test {
        groovy {
            srcDirs = ['test/groovy']
        }
    }
}

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs = ["src/main/java", "src/main/groovy"]

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Main-Class': 'common.Application'
//                'Class-Path': configurations.compile.collect { it.getName() }.join(';')
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Main-Class': 'common.Application'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//task runScript (dependsOn: 'classes', type: JavaExec) {
//    main = 'Manager'
//    classpath = sourceSets.main.runtimeClasspath
//}

